int mod = 1e9 + 7;
class segTree {
public:
    public: 
	vector<int> tree;
	int N = 0;
	void build(int n, vector<int> &a) {
		while(__builtin_popcount(n) != 1) {
			n++;
		}
		tree.resize(2 * n);
		for(int i = 0; i < a.size(); i++) {
			tree[n + i] = a[i];
		}
		for(int i = n - 1; i > 0; i--) {
			tree[i] = (tree[2 * i] + tree[2 * i + 1]) % mod;
		}
		N = n;
	}
    segTree(vector<int>& a) {
        build(a.size(), a);
    }
    void update(int ind, int val) {
		ind += N;
		tree[ind] = val;
		ind /= 2;
		while(ind > 0) {
			tree[ind] = tree[2 * ind] + tree[2 * ind + 1];
			ind /= 2;
		}
	}
    int fun(int ind, int i, int j, int l, int r)
    {
        if(i > r || j < l)
            return 0;
        if(i >= l && j <= r)
            return tree[ind];
        
        int mid = (i + j) / 2;
        return fun(2 * ind, i, mid, l, r) + fun(2 * ind + 1, mid + 1, j, l, r);
      
    }
    int sumRange(int left, int right) {
        return fun(1, 0, N - 1, left, right);
    }
};
