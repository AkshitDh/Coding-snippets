struct Node {
    Node *next[26] = {NULL};
    bool isEnd = 0;
};
class Trie {
public:
    Node * root;
    Trie() {
      root = new Node();
    }
    
    void insert(string a) {
        Node *ptr = root;
        for(auto x: a)
        {
            int c = x - 'a';
            if(ptr->next[c] == NULL)
                ptr->next[c] = new Node();
            ptr = ptr->next[c];
        }
        ptr->isEnd = 1;
    }
    
    bool search(string a) {
        Node *ptr = root;
        for(auto x: a)
        {
            int c = x - 'a';
            if(ptr->next[c] != NULL)
                ptr = ptr->next[c];
            else
                return 0;
        }
        return ptr->isEnd;
    }
    
    bool startsWith(string a) {
        Node *ptr = root;
        for(auto x: a)
        {
            int c = x - 'a';
            if(ptr->next[c] != NULL)
                ptr = ptr->next[c];
            else
                return 0;
        }
        return 1;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
