class MedianFinder {
private:
    priority_queue<int> pq1;
    priority_queue<int, vector<int>, greater<int>> pq2;
public:
    MedianFinder() {
    }
    void addNum(int num) {
        (pq1.size() == 0 || num < pq1.top()) ? pq1.push(num): pq2.push(num);
        if(pq1.size() > pq2.size() + 1)
        {
            int tmp = pq1.top();
            pq1.pop();
            pq2.push(tmp);
        }
        else if(pq2.size() > pq1.size() + 1)
        {
            int tmp = pq2.top();
            pq2.pop();
            pq1.push(tmp);
        }
    }
    double findMedian() {
        if(pq1.size() == pq2.size())
            return ((double)pq1.top() + pq2.top()) / 2;
        else
            return (pq1.size() > pq2.size() ? pq1.top(): pq2.top());
    }
};
